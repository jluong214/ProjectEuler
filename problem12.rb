# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# 36: 1,2,3,4,6,9,12,18,36
# 45: 1,3,5,9,15,45
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

def summation(num)
	return (num *(num + 1)) /2
end

def num_of_factors(num)
	return 1 if num == 1
	
	# Prime Factorization see Problem 3
	factor = []
	while num > 1
		div = 2;
		while num % div != 0
			div += 1
		end
		num = num / div
		factor.push div
	end
	
	count = Hash.new 0
	factor.each do |num|
		count[num] += 1
	end
	return (count.values).to_a.map {|i| i + 1}.reduce(:*)
end

def find_triangle(limit)
	value = 1
	below_limit = true
	while below_limit
		value += 1
		below_limit = false if num_of_factors(summation(value))	> limit
	end
	return summation(value)
end

find_triangle 500
